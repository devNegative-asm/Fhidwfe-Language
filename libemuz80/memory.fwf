guard

//specifically allow these variables to be accessible in other files
import heap
import heaphead
import heaptail
import null
import one
import int_size

//alias uint sizeof(a:listbyte)
//alias uint sizeof(a:listubyte)
//alias uint sizeof(a:listptr)
//alias uint sizeof(a:listuint)
//alias uint sizeof(a:listint)

alias void put_byte(a:ptr b:ubyte)//don't penalize for not using the right one
alias void put_ubyte(a:ptr b:byte)

function void download_more_ram() {

}

function uint sizeof(input:ptr) {
	return deref_uint$ - input @ptr ? 1
}

// lastptr
// nextptr
// size

dummy = 0


//prev
//next
//size

function ptr malloc_previous(x:ptr) {
	return deref_ptr$ - x ?3u
}
function ptr malloc_next(x:ptr) {
	return deref_ptr$ - x ?2u
}
function void free(x:ptr) {
	ifnot = null x {
		ifnot = 0u sizeof$ x {
			prev= malloc_previous$ x
			next= malloc_next$ x
			put_ptr$ - prev ?2u next
			put_ptr$ - next ?3u prev
		} ;
	} ;
}
function ptr malloc(size:uint) {
	if = 0u size {
		return + @dummy ?1u
	} ;
	currentObject = heap
	newsize = + size ?3u
	set done
	while done {
		nextObject = malloc_next$ currentObject
		if = nextObject null {
			return null
		} ;
		spaceleft = - - @uint - nextObject currentObject ?3u sizeof$ currentObject
		if >= spaceleft newsize {
			newObject = + @ptr ?3 + currentObject sizeof$ currentObject
			put_uint$ - newObject ?1u size
			put_ptr$ - newObject ?2u nextObject
			put_ptr$ - newObject ?3u currentObject
			put_ptr$ - currentObject ?2u newObject
			put_ptr$ - nextObject ?3u newObject
			return newObject
		} {
			currentObject = nextObject
		}
	}
	return null
}

function ptr realloc(object:ptr size:uint) {
	newSize = umin$ sizeof$ object size
	result = malloc$ size
	memcpy$ result object newSize
	return result
}

alias void free(a:listbyte)
alias void free(a:listubyte)
alias void free(a:listptr)
alias void free(a:listuint)
alias void free(a:listint)
alias void free(a:listfunc)
alias void free(a:listop)
alias void free(a:range)
alias void free(a:urange)
alias void free(a:brange)
alias void free(a:ubrange)

