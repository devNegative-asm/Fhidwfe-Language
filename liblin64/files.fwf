guard
import one
import null
import int_size

O_RDONLY   =     0
O_WRONLY    =    1
O_RDWR    =      2
O_CREAT  =       64  
O_EXCL    =      128 
O_NOCTTY   =     256 
O_TRUNC     =    512
O_APPEND     =   1024
O_NONBLOCK    =  2048
O_NOFOLLOW   =   131072
S_IRUSR = 256 //user has read permission
S_IWUSR = 128 //user has write permission
S_IXUSR = 64 //user has execute permission
S_IRGRP = 32 //group has read permission
S_IWGRP = 16 //group has write permission
S_IXGRP = 8 //group has execute permission
S_IROTH = 4 //others have read permission
S_IWOTH = 2 //others have write permission
S_IXOTH = 1 //others have execute permission

function ubyte getc() {
	return @ubyte fread$ @file 0
}

function bool file_is_protected(filename:ptr) {
	dotcounter = 0
	namechar = deref_ubyte$ filename
	whilenot = 0ub namechar {
	
		if = namechar '.' {
			dotcounter = + 1 dotcounter
		} {
			dotcounter = 0
		}
		if > dotcounter 1 {
			return true
		} ;
		filename = + filename one
		namechar = deref_ubyte$ filename
	}
	return false
}

function void putchar(c:ubyte) {
	fwrite$ @file 1 c
}

fwrite_request = ?3u
fwrite_request_1 = 0
fwrite_request_2 = null
fwrite_request_3 = 0u

function void fwrite(f:file char:ubyte) {
	
	fwrite_request = ?3u
	fwrite_request_1 = @int f
	fwrite_request_2 = @char
	fwrite_request_3 = 1u

	unix_syscall$ 1 @fwrite_request_1
}

function int fread(f:file) {
	temp buffer = [0ub]
	temp request = [
		@ptr @uint f
		@ptr buffer
		one
	]
	count = unix_syscall$ 0 request
	if = count 0 {
		return !1
	} ;
	return @int deref_ubyte$ @ptr buffer
}

function void fflush(f:file) {
	
}

function file fopen_w(path:ptr) {
	if file_is_protected$ path {
		error$ concat$ concat$ "file " path " is protected."
	} ;
	temp request = [
		@int path
		| | O_NOFOLLOW O_WRONLY O_CREAT
		| | S_IRUSR S_IWUSR S_IRGRP
	]
	fd = unix_syscall$ 2 request
    if < fd 0 {
    	error$ concat$ "failed to open file " path
    } ;
    return @file fd
}

function file fopen_a(path:ptr) {
	if file_is_protected$ path {
		error$ concat$ concat$ "file " path " is protected."
	} ;
	temp request = [
		@int path
		| | O_NOFOLLOW O_WRONLY O_APPEND
		| | S_IRUSR S_IWUSR S_IRGRP
	]
	fd = unix_syscall$ 2 request
    if < fd 0 {
    	error$ concat$ "failed to open file " path
    } ;
    return @file fd
}

function file fopen_r(path:ptr) {
	if file_is_protected$ path {
		error$ concat$ concat$ "file " path " is protected."
	} ;
    temp request = [
        @int path
        | O_NOFOLLOW O_RDONLY 
        0
    ]
    fd = unix_syscall$ 2 request
    if < fd 0 {
    	error$ concat$ "failed to open file " path
    } ;
    return @file fd 
}

function void fclose(f:file) {
	temp request = [@ptr f]
	unix_syscall$ 3 request
}

function void fwrites(f:file s:ptr) {
	len = strlen$ s
	for uint [0u,len) with index {
		fwrite$ f deref_ubyte$ + s as index ptr
	}
}

alias void fwritebytes(f:file a:listbyte)

function void fwritebytes(f:file lis:listubyte) {
	for ubyte lis with writer {
		fwrite$ f writer
	}
}

//read as many bytes as possible from the file, up to the given max

function listubyte freadmany(f:file max:uint) {
	ret = malloc$ + 1u max
	index = 0u
	while < index max {
		result = fread$ f
		if = ~0u result {
			put_ubyte$ + as index ptr ret 0ub
			return as realloc$ ret + 1u index listubyte
		} {
			put_ubyte$ + as index ptr ret as result ubyte
			index = + index 1u
		}
	}
	put_ubyte$ + as max ptr ret 0ub
	return as ret listubyte
}
