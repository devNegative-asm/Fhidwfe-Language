guard
import null
import int_size


extern int unix_syscall(callID:uint arguments:listuint)


//MMAP constants

PROT_READ = 1 // page can be read
PROT_WRITE = 2 //            /* page can be written */
PROT_EXEC = 4 //            /* page can be executed */
PROT_SEM = 8 //            /* page may be used for atomic ops */
PROT_NONE = 0 //            /* page can not be accessed */

MAP_FIXED = 16 //           /* Interpret addr exactly */
MAP_ANONYMOUS = 32 //           /* don't use a file */
MAP_SHARED = 1 //           /* Share changes */
MAP_PRIVATE = 2

//malloc can't rely on creating a list before calling mmap
malloc_request_1 = ?6
malloc_request_2_addr = null
malloc_request_3_len = 0u
malloc_request_4_protection = | PROT_READ PROT_WRITE
malloc_request_5_flags = | MAP_ANONYMOUS MAP_PRIVATE
malloc_request_6_fd = !1
malloc_request_7_offset = 0



extern int findlsb256(v:ptr)


function ptr request_single_page() {
	return request_page_of_size$ 4096u	
}

function ptr request_page_of_size(totalSize:uint) {
	malloc_request_1 = ?6 // mmap takes 6 args
	malloc_request_3_len = totalSize
	block = @ptr unix_syscall$ 9 @malloc_request_2_addr
	if < @int block 0 {
		return null
	} ;
	return block
}

MALLOC_BASE_BLOCK = request_single_page$
format_page_to_malloc_database$ MALLOC_BASE_BLOCK

ZERO_LIST = 0
ZERO_LIST_GUARD = 0




function bool find_and_unmalloc(object:ptr block:ptr offset:uint entries:uint requestSize:uint) {
	entriesBackup = entries

	//find a non-null pointer where object is between base and base + requestSize  * 256
	whilenot = 0u entries {
		entry = + block offset
		allocated = deref_ptr$ + entry ?4u
		ifnot = allocated null {
			if &&
				<= allocated object 
				< object + allocated * requestSize 256u {

				//free the object
				//first, find its bit

				bitLocation = / - object allocated requestSize

				marker = + entry ? / bitLocation 64u
				bitmask = shift_left$ 1u & 63u @uint bitLocation

				//to be considered malloced, the bit must be 0. we will set it to 1 then return true
				//if it's already 1, this is a double free

				ifnot = 0u & deref_uint$ marker bitmask {
					error$ "double free detected"
				} ;

				put_uint$ marker | deref_uint$ marker bitmask
				return true
			} ;
		} ;


		offset = + offset ?5u
		entries = - entries 1u
	}

	return false
}





function ptr malloc_fill_attempt_from_entries(block:ptr offset:uint entries:uint requestSize:uint) {
	entriesBackup = entries
	offsetBackup = offset
	// if it finds empty space, it will mark that space as used, then return a pointer to the space that can be filled
	whilenot = 0u entries {

		entry = + block offset
		allocated = deref_ptr$ + entry ?4u


		ifnot = allocated null {
			lsb = findlsb256$ entry
			
			ifnot = !1 lsb {
				
				//bitfield entry[lsb] = 0
				marker = + entry ? / @uint lsb 64u



				bitmask = ~ shift_left$ 1 @uint & lsb 63

				put_int$ marker & deref_int$ marker bitmask

				return + allocated * @uint lsb requestSize

			} ;
		} ;


		offset = + offset ?5u
		entries = - entries 1u
	}


	//either all space is taken, or we haven't mapped a valid location yet

	entries = entriesBackup 
	offset = offsetBackup

	//mmap more space if there's somewhere to store the pointer
	whilenot = 0u entries {
		entry = + block offset
		allocated = deref_ptr$ + entry ?4u
		if = allocated null {
			allocated = request_page_of_size$ * 256u requestSize
			put_ptr$ + entry ?4u allocated
			if = allocated null {
				return null
			} ;
			put_int$ entry ~1
			return allocated
		} ;


		offset = + offset ?5u
		entries = - entries 1u
	}

	return null
}

entry_size = ?5u
vtiny_offset = 0u
tiny_offset = * entry_size 16u
vsmall_offset = + tiny_offset * entry_size 16u
small_offset = + vsmall_offset * entry_size 16u
normal_offset = + small_offset * entry_size 16u

hnormal_offset = + normal_offset * entry_size 10u
big_offset = + hnormal_offset * entry_size 10u
vbig_offset = + big_offset * entry_size 10u

malloc_ll_offset = + vbig_offset * entry_size 8u

function ptr malloc(blockSize:uint) {
	mappingsPage = MALLOC_BASE_BLOCK
	functionalSize = + blockSize int_size
	if = 0u blockSize {
		return + @ZERO_LIST 8u //as long as the requester follows the contract to not edit size directly, this should be fine
	} ;

	attempt = null
	if > functionalSize 2048u {
		//this belongs in its own page space
		block = request_page_of_size$ functionalSize
		if = block null {
			return null
		} {
			put_uint$ block blockSize
			return + block int_size
		}
	} ;


	while true {
		if <= functionalSize 128u {
			if <= functionalSize 32u {
				if <= functionalSize 16u {
					attempt = malloc_fill_attempt_from_entries$ mappingsPage vtiny_offset 16u 16u
				} {
					attempt = malloc_fill_attempt_from_entries$ mappingsPage tiny_offset 16u 32u
				}
			} {
				if <= functionalSize 64u {
					attempt = malloc_fill_attempt_from_entries$ mappingsPage vsmall_offset 16u 64u
				} {
					attempt = malloc_fill_attempt_from_entries$ mappingsPage small_offset 16u 128u
				}
			}
		} {
			if <= functionalSize 512u {
				if <= functionalSize 256u {
					attempt = malloc_fill_attempt_from_entries$ mappingsPage normal_offset 10u 256u
				} {
					attempt = malloc_fill_attempt_from_entries$ mappingsPage hnormal_offset 10u 512u
				}
			} {
				if <= functionalSize 1024u {
					attempt = malloc_fill_attempt_from_entries$ mappingsPage big_offset 10u 1024u
				} {
					attempt = malloc_fill_attempt_from_entries$ mappingsPage vbig_offset 8u 2048u
				}
			}
		}
		ifnot = attempt null {
			put_uint$ attempt blockSize
			return + attempt int_size
		} {
			nextDatabasePage = deref_ptr$ + mappingsPage malloc_ll_offset
			if = nextDatabasePage null {
				nextDatabasePage = request_single_page$
				format_page_to_malloc_database$ nextDatabasePage
				put_ptr$ + mappingsPage malloc_ll_offset nextDatabasePage
			} ;
			if = nextDatabasePage null {
				return null
			} ;
			mappingsPage = nextDatabasePage
		}

	}
	return null	
}

function void unmap_memory(block:ptr size:uint) {
	malloc_request_1 = ?2
	malloc_request_2_addr = block
	malloc_request_3_len = size
	unix_syscall$ 11 @malloc_request_2_addr
}



function void check_and_unmap(entry:ptr pages:uint) {
	size = * 4096u pages
	if 
		&& = !1 deref_int$ entry
		&& = !1 deref_int$ + entry ?1
		&& = !1 deref_int$ + entry ?2
		   = !1 deref_int$ + entry ?3 {
		unmap_memory$ deref_ptr$ + entry ?4 size
		put_ptr$ + entry ?4 null
	} ; 
}

//free makes memory available to be reused in the program, not necessarily to the OS
//this unmaps any pages in use by malloc which don't have any data stored on them
function void download_more_ram() {
	mappingsPage = MALLOC_BASE_BLOCK
	whilenot = null mappingsPage {
		//we can use for loops here since malloc doesn't call this

		for uint [0u,16u) with entry {
			check_and_unmap$ + + mappingsPage vtiny_offset * entry ?5u 1u
			check_and_unmap$ + + mappingsPage tiny_offset * entry ?5u 2u
			check_and_unmap$ + + mappingsPage vsmall_offset * entry ?5u 4u
			check_and_unmap$ + + mappingsPage small_offset * entry ?5u 8u
		}
		for uint [0u,10u) with entry {
			check_and_unmap$ + + mappingsPage normal_offset * entry ?5u 16u
			check_and_unmap$ + + mappingsPage hnormal_offset * entry ?5u 32u
			check_and_unmap$ + + mappingsPage big_offset * entry ?5u 64u
		}
		for uint [0u,8u) with entry {
			check_and_unmap$ + + mappingsPage vbig_offset * entry ?5u 128u
		}

		mappingsPage = deref_ptr$ + mappingsPage malloc_ll_offset
	}
}


alias void free(block:listptr)
alias void free(block:listint)
alias void free(block:listuint)
alias void free(block:listubyte)
alias void free(block:listbyte)
alias void free(block:range)
alias void free(block:urange)
alias void free(block:brange)
alias void free(block:ubrange)

function void free(block:ptr) {
	mappingsPage = MALLOC_BASE_BLOCK

	ifnot = block null {
		
		functionalSize = + int_size deref_uint$ - block int_size
		if = int_size functionalSize {
			return
		} ;
		if > functionalSize 2048u {
			unmap_memory$ - block int_size functionalSize
			return
		} ;

		malloced = - block ?1u
		attempt = false

		//this time attempt means whether the item was found or not as a boolean

		whilenot = mappingsPage null {
			if <= functionalSize 128u {
				if <= functionalSize 32u {
					if <= functionalSize 16u {
						attempt = find_and_unmalloc$ malloced mappingsPage vtiny_offset 16u 16u
					} {
						attempt = find_and_unmalloc$ malloced mappingsPage tiny_offset 16u 32u
					}
				} {
					if <= functionalSize 64u {
						attempt = find_and_unmalloc$ malloced mappingsPage vsmall_offset 16u 64u
					} {
						attempt = find_and_unmalloc$ malloced mappingsPage small_offset 16u 128u
					}
				}
			} {
				if <= functionalSize 512u {
					if <= functionalSize 256u {
						attempt = find_and_unmalloc$ malloced mappingsPage normal_offset 10u 256u
					} {
						attempt = find_and_unmalloc$ malloced mappingsPage hnormal_offset 10u 512u
					}
				} {
					if <= functionalSize 1024u {
						attempt = find_and_unmalloc$ malloced mappingsPage big_offset 10u 1024u
					} {
						attempt = find_and_unmalloc$ malloced mappingsPage vbig_offset 8u 2048u
					}
				}
			}

			if attempt {
				return
			} {
				mappingsPage = deref_ptr$ + mappingsPage malloc_ll_offset
			}
		}
		puts$ "failed to find: "
		put_hex$ block
		putln$
		dump_page$ MALLOC_BASE_BLOCK
		error$ "Attempted to free pointer which was not found in malloc table"
	} ;
}



function void dump_malloc_page() {

	dump_page$ MALLOC_BASE_BLOCK
}

function void dump_page(page:ptr) {
	entry_num = 0u
	puts$ "@ ["
	put_hex$ page
	puts$ "]\n"

	while < entry_num 512u {
		if = 0u % entry_num 5u {
			putln$
		} {
			putchar$ ' '
		}
		put_hex$ deref_int$ +page ?entry_num
		entry_num = + entry_num 1u
	}
	putln$
}



function void format_page_to_malloc_database(page:ptr) {
	// 512 words
	// 4 words per bitmap + ptr
	// 102 entries to distribute
	
	// 16 x 16 bytes vtiny
	// 16 x 32 bytes tiny
	// 16 x 64 bytes vsmall
	// 16 x 128 bytes small

	// 10 x 256 bytes normal
	// 10 x 512 bytes hnormal
	// 10 x 1024 bytes big
	// 8 x 2048 bytes vbig

	// sizes above 2040 go to their own mapped pages
	

	//use while loops since for loops call malloc
	entry = 0u
	while < entry 102u {
		quarter = 0u
		while < quarter 4u {
			put_int$
				+ page
				+ vtiny_offset
					? + quarter
					* entry 5u

				!1

			quarter = + quarter 1u
		}

		entry = + entry 1u
	}


	//for uint [0u,102u) with entry {
	//	for uint[0u,4u) with quarter {
	//
	//			
	//	}
	//}
	//dump_page$ page
}
