guard
import stdin

extern void terminal_mode_raw()
extern void terminal_mode_default()

lowercase = ['a','z']
uppercase = ['A','Z']
function int control_modified(keycode:ubyte) {
	if in keycode lowercase {
		return @int - + keycode 1ub 'a'
	} ;
	if in keycode uppercase {
		return - @int keycode 64
	} ;
	return 3
}


function int puts_alias(str:ptr) {
	puts$ str
	return 0
}





function int free_keys(a:ptr b:ptr) {
	c = @String a
	c.delete$
	free$ a
	return 0
}

function int main() {
	reset exitingflag
	temp varmappings = ArrayStringMap$
	
	whilenot exitingflag {
		puts$ "var name: "
		command = stdin.next_line$
		if command.eqs$ "exit" {
			command.delete$
			free$ command
			set exitingflag
		} {
			if varmappings.contains_key$ command {
				puts$ "that variable maps to "
				puti$ @int varmappings.get$ command
				putln$
				free$ command
			} {
				puts$ "value: "
				number = stdin.next_int$
				varmappings.put$ command number
			}
		}
	}
	varmappings.for_each$ free_keys

	return 0
}



exit_code = main$

//free$ recycles memory to be used later in fhidwfe. download_more_ram$ returns unused memory to the OS

download_more_ram$
//dump_malloc_page$
return exit_code

