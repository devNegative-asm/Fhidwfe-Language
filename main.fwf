import null
import stdin
import stdout
guard

function void pw2(char:ubyte) {
	putchar$ 27ub
	putchar$ '['


	if = char 'Y' {
		puts$ "103m"
	} ;
	if = char 'G' {
		puts$ "102m"
	} ;
	if = char 'R' {
		puts$ "41m"
	} ;
	if = char 'B' {
		puts$ "104m"
	} ;
	if = char 'W' {
		puts$ "47m"
	} ;
	if = char 'O' {
		puts$ "101m"
	} ;
	puts$ "  "
	putchar$ 27ub
	puts$ "[0m"
}

type Cube (
	f:listubyte
	r:listubyte
	l:listubyte
	b:listubyte
	u:listubyte
	d:listubyte

	function void init() {
		this.f = @listubyte malloc$ 9u
		this.r = @listubyte malloc$ 9u
		this.l = @listubyte malloc$ 9u
		this.b = @listubyte malloc$ 9u
		this.u = @listubyte malloc$ 9u
		this.d = @listubyte malloc$ 9u
		for int [0,9) with index {
			(index)this.f = 'R'
			(index)this.u = 'Y'
			(index)this.d = 'W'
			(index)this.b = 'O'
			(index)this.r = 'G'
			(index)this.l = 'B'
		}
	}

	function void delete() {
		free$ this.f
		free$ this.r
		free$ this.l
		free$ this.u
		free$ this.d
		free$ this.b
	}

	function void U() {
		//         U0 U1 U2
		//         U3 U4 U5
		//         U6 U7 U8
		//L0 L1 L2 F0 F1 F2 R0 R1 R2 B0 B1 B2
		//L3 L4 L5 F3 F4 F5 R3 R4 R5 B3 B4 B5
		//L6 L7 L8 F6 F7 F8 R6 R7 R8 B6 B7 B8
		//         D0 D1 D2
		//         D3 D4 D5
		//         D6 D7 D8

		cb0 = (0)this.b
		cb1 = (1)this.b
		cb2 = (2)this.b

		(0)this.b = (0)this.l
		(1)this.b = (1)this.l
		(2)this.b = (2)this.l
		(0)this.l = (0)this.f
		(1)this.l = (1)this.f
		(2)this.l = (2)this.f
		(0)this.f = (0)this.r
		(1)this.f = (1)this.r
		(2)this.f = (2)this.r
		(0)this.r = cb0
		(1)this.r = cb1
		(2)this.r = cb2

		u0 = (0)this.u
		u1 = (1)this.u

		(1)this.u = (3)this.u
		(3)this.u = (7)this.u
		(7)this.u = (5)this.u
		(5)this.u = u1

		(0)this.u = (6)this.u
		(6)this.u = (8)this.u
		(8)this.u = (2)this.u
		(2)this.u = u0
	}

	function void E() {
		cb6 = (3)this.b
		cb7 = (4)this.b
		cb8 = (5)this.b

		(3)this.b = (3)this.r
		(4)this.b = (4)this.r
		(5)this.b = (5)this.r
		(3)this.r = (3)this.f
		(4)this.r = (4)this.f
		(5)this.r = (5)this.f
		(3)this.f = (3)this.l
		(4)this.f = (4)this.l
		(5)this.f = (5)this.l
		(3)this.l = cb6
		(4)this.l = cb7
		(5)this.l = cb8
	}
	function void M() {
		u1 = (1)this.u
		u4 = (4)this.u
		u7 = (7)this.u

		(1)this.u = (7)this.b
		(4)this.u = (4)this.b
		(7)this.u = (1)this.b
		(7)this.b = (1)this.d
		(4)this.b = (4)this.d
		(1)this.b = (7)this.d
		(1)this.d = (1)this.f
		(4)this.d = (4)this.f
		(7)this.d = (7)this.f
		(1)this.f = u1
		(4)this.f = u4
		(7)this.f = u7
	}

	function void S() {
		u3 = (3)this.u
		u4 = (4)this.u
		u5 = (5)this.u

		(3)this.u = (7)this.l
		(4)this.u = (4)this.l
		(5)this.u = (1)this.l

		(7)this.l = (5)this.d
		(4)this.l = (4)this.d
		(1)this.l = (3)this.d
		(5)this.d = (1)this.r
		(4)this.d = (4)this.r
		(3)this.d = (7)this.r
		(1)this.r = u3
		(4)this.r = u4
		(7)this.r = u5
	}

	function void D() {
		//         U0 U1 U2
		//         U3 U4 U5
		//         U6 U7 U8
		//L0 L1 L2 F0 F1 F2 R0 R1 R2 B0 B1 B2
		//L3 L4 L5 F3 F4 F5 R3 R4 R5 B3 B4 B5
		//L6 L7 L8 F6 F7 F8 R6 R7 R8 B6 B7 B8
		//         D0 D1 D2
		//         D3 D4 D5
		//         D6 D7 D8

		cb6 = (6)this.b
		cb7 = (7)this.b
		cb8 = (8)this.b

		(6)this.b = (6)this.r
		(7)this.b = (7)this.r
		(8)this.b = (8)this.r
		(6)this.r = (6)this.f
		(7)this.r = (7)this.f
		(8)this.r = (8)this.f
		(6)this.f = (6)this.l
		(7)this.f = (7)this.l
		(8)this.f = (8)this.l
		(6)this.l = cb6
		(7)this.l = cb7
		(8)this.l = cb8

		d0 = (0)this.d
		d1 = (1)this.d

		(1)this.d = (3)this.d
		(3)this.d = (7)this.d
		(7)this.d = (5)this.d
		(5)this.d = d1

		(0)this.d = (6)this.d
		(6)this.d = (8)this.d
		(8)this.d = (2)this.d
		(2)this.d = d0
	}

	function void F() {
		//save corner
		
		cf = (8)this.f
		cd = (2)this.d
		cr = (6)this.r

		(8)this.f = (2)this.f
		(2)this.f = (0)this.f
		(0)this.f = (6)this.f
		(6)this.f = cf

		(6)this.r = (8)this.u
		(8)this.u = (2)this.l
		(2)this.l = (0)this.d
		(0)this.d = cr

		(2)this.d = (0)this.r
		(0)this.r = (6)this.u
		(6)this.u = (8)this.l
		(8)this.l = cd

		//save side
		sf = (5)this.f
		sr = (3)this.r

		(3)this.r = (7)this.u
		(7)this.u = (5)this.l
		(5)this.l = (1)this.d
		(1)this.d = sr

		(5)this.f = (1)this.f
		(1)this.f = (3)this.f
		(3)this.f = (7)this.f
		(7)this.f = sf
	}

	function void L() {
		//         U2 U5 U8
		//         U1 U4 U7
		//         U0 U3 U6
		//B0 B1 B2 L0 L1 L2 F0 F1 F2 R0 R1 R2
		//B3 B4 B5 L3 L4 L5 F3 F4 F5 R3 R4 R5
		//B6 B7 B8 L6 L7 L8 F6 F7 F8 R6 R7 R8
		//         D6 D3 D0
		//         D7 D4 D1
		//         D8 D5 D2

		cl = (0)this.l
		cu = (0)this.u
		cb = (2)this.b

		(0)this.l = (6)this.l
		(6)this.l = (8)this.l
		(8)this.l = (2)this.l
		(2)this.l = cl

		(0)this.u = (8)this.b
		(8)this.b = (0)this.d
		(0)this.d = (0)this.f
		(0)this.f = cu

		(2)this.b = (6)this.d
		(6)this.d = (6)this.f
		(6)this.f = (6)this.u
		(6)this.u = cb

		su = (3)this.u
		sl = (1)this.l

		(1)this.l = (3)this.l
		(3)this.l = (7)this.l
		(7)this.l = (5)this.l
		(5)this.l = sl

		(3)this.u = (5)this.b
		(5)this.b = (3)this.d
		(3)this.d = (3)this.f
		(3)this.f = su

	}
	function void B() {

		//                  U8 U7 U6
		//                  U5 U4 U3
		//                  U2 U1 U0
		//F0 F1 F2 R0 R1 R2 B0 B1 B2 L0 L1 L2 
		//F3 F4 F5 R3 R4 R5 B3 B4 B5 L3 L4 L5
		//F6 F7 F8 R6 R7 R8 B6 B7 B8 L6 L7 L8
		//                  D8 D7 D6
		//                  D5 D4 D3
		//                  D2 D1 D0

		cb = (2)this.b
		cu = (0)this.u
		cl = (0)this.l

		(2)this.b = (0)this.b
		(0)this.b = (6)this.b
		(6)this.b = (8)this.b
		(8)this.b = cb

		(0)this.l = (2)this.u
		(2)this.u = (8)this.r
		(8)this.r = (6)this.d
		(6)this.d = cl

		(0)this.u = (2)this.r
		(2)this.r = (8)this.d
		(8)this.d = (6)this.l
		(6)this.l = cu

		sb = (5)this.b
		sl = (3)this.l

		(5)this.b = (1)this.b
		(1)this.b = (3)this.b
		(3)this.b = (7)this.b
		(7)this.b = sb

		(3)this.l = (1)this.u
		(1)this.u = (5)this.r
		(5)this.r = (7)this.d
		(7)this.d = sl
	}

	function void R() {
		//                  U6 U3 U0
		//                  U7 U4 U1
		//                  U8 U5 U2
		//L0 L1 L2 F0 F1 F2 R0 R1 R2 B0 B1 B2
		//L3 L4 L5 F3 F4 F5 R3 R4 R5 B3 B4 B5
		//L6 L7 L8 F6 F7 F8 R6 R7 R8 B6 B7 B8
		//                  D2 D5 D8
		//                  D1 D4 D7
		//                  D0 D3 D6
		//save corner
		
		cf = (2)this.f
		cu = (8)this.d
		cr = (0)this.r

		(2)this.f = (2)this.d
		(2)this.d = (6)this.b
		(6)this.b = (2)this.u
		(2)this.u = cf

		(8)this.d = (0)this.b
		(0)this.b = (8)this.u
		(8)this.u = (8)this.f
		(8)this.f = cu

		(0)this.r = (6)this.r
		(6)this.r = (8)this.r
		(8)this.r = (2)this.r
		(2)this.r = cr

		//save side
		sf = (5)this.f
		sr = (3)this.r

		(3)this.r = (7)this.r
		(7)this.r = (5)this.r
		(5)this.r = (1)this.r
		(1)this.r = sr

		(5)this.f = (5)this.d
		(5)this.d = (3)this.b
		(3)this.b = (5)this.u
		(5)this.u = sf
	}

	function void l() {
		this.L$
		this.M$
	}

	function void r() {
		this.R$
		this.M$
		this.M$
		this.M$
	}

	function void u() {
		this.U$
		this.E$
		this.E$
		this.E$
	}

	function void d() {
		this.D$
		this.E$
	}

	function void f() {
		this.F$
		this.S$
	}

	function void b() {
		this.B$
		this.S$
		this.S$
		this.S$
	}

	function void X() {
		this.r$
		this.L$
		this.L$
		this.L$
	}

	function void Y() {
		this.u$
		this.D$
		this.D$
		this.D$
	}

	function void Z() {
		this.f$
		this.B$
		this.B$
		this.B$
	}

	function void Up() {
		this.U$
		this.U$
		this.U$
	}
	function void Dp() {
		this.D$
		this.D$
		this.D$
	}
	function void Fp() {
		this.F$
		this.F$
		this.F$
	}
	function void Bp() {
		this.B$
		this.B$
		this.B$
	}
	function void Lp() {
		this.L$
		this.L$
		this.L$
	}
	function void Rp() {
		this.R$
		this.R$
		this.R$
	}
	function void Ep() {
		this.E$
		this.E$
		this.E$
	}
	function void Sp() {
		this.S$
		this.S$
		this.S$
	}
	function void Mp() {
		this.M$
		this.M$
		this.M$
	}
	function void Xp() {
		this.X$
		this.X$
		this.X$
	}
	function void Yp() {
		this.Y$
		this.Y$
		this.Y$
	}
	function void Zp() {
		this.Z$
		this.Z$
		this.Z$
	}

	function void print() {
		//         U0 U1 U2
		//         U3 U4 U5
		//         U6 U7 U8
		//L0 L1 L2 F0 F1 F2 R0 R1 R2 B0 B1 B2
		//L3 L4 L5 F3 F4 F5 R3 R4 R5 B3 B4 B5
		//L6 L7 L8 F6 F7 F8 R6 R7 R8 B6 B7 B8
		//         D0 D1 D2
		//         D3 D4 D5
		//         D6 D7 D8
		f = this.f
		u = this.u
		d = this.d
		b = this.b
		l = this.l
		r = this.r
		puts$ "        "
		pw2$ (0)u
		pw2$ (1)u
		pw2$ (2)u
		puts$ "\n        "
		pw2$ (3)u
		pw2$ (4)u
		pw2$ (5)u
		puts$ "\n        "
		pw2$ (6)u
		pw2$ (7)u
		pw2$ (8)u
		putln$
		putln$
		pw2$ (0)l
		pw2$ (1)l
		pw2$ (2)l
		puts$ "  "
		pw2$ (0)f
		pw2$ (1)f
		pw2$ (2)f
		puts$ "  "
		pw2$ (0)r
		pw2$ (1)r
		pw2$ (2)r
		puts$ "  "
		pw2$ (0)b
		pw2$ (1)b
		pw2$ (2)b
		putln$
		pw2$ (3)l
		pw2$ (4)l
		pw2$ (5)l
		puts$ "  "
		pw2$ (3)f
		pw2$ (4)f
		pw2$ (5)f
		puts$ "  "
		pw2$ (3)r
		pw2$ (4)r
		pw2$ (5)r
		puts$ "  "
		pw2$ (3)b
		pw2$ (4)b
		pw2$ (5)b
		putln$
		pw2$ (6)l
		pw2$ (7)l
		pw2$ (8)l
		puts$ "  "
		pw2$ (6)f
		pw2$ (7)f
		pw2$ (8)f
		puts$ "  "
		pw2$ (6)r
		pw2$ (7)r
		pw2$ (8)r
		puts$ "  "
		pw2$ (6)b
		pw2$ (7)b
		pw2$ (8)b

		putln$
		puts$ "\n        "
		pw2$ (0)d
		pw2$ (1)d
		pw2$ (2)d
		puts$ "\n        "
		pw2$ (3)d
		pw2$ (4)d
		pw2$ (5)d
		puts$ "\n        "
		pw2$ (6)d
		pw2$ (7)d
		pw2$ (8)d
		putln$
		putln$
	}
	
)


function void cls() {
	putchar$ 27ub
	puts$ "[2J"
}

function void random_scramble(cube:Cube debug:bool) {
	puts$ "spam the keyboard (seed): "
	temp line = stdin.next_line$
	temp cstr = line.c_str$
	seed = @uint string_hash$ @listubyte cstr
	cls$
	cube.print$
	nanosleep$ 800000000u
	for int [1,21] with i {
		ifnot debug {
			nanosleep$ 300000000u
			cls$
			cube.print$
		} ;
		bits = & 7u seed
		seed = >> >> >> seed
		if = bits 0u {
			cube.R$
			if debug {
			puts$ "R"
			};
		} ;
		if = bits 1u {
			cube.L$
			if debug {
			puts$ "L"
			};
		} ;
		if = bits 2u {
			cube.U$
			if debug {
			puts$ "U"
			};
		} ;
		if = bits 3u {
			cube.D$
			if debug {
			puts$ "D"
			};
		} ;
		if = bits 4u {
			cube.B$
			if debug {
			puts$ "B"
			};
		} ;
		if = bits 5u {
			cube.F$
			if debug {
			puts$ "F"
			};
		} ;
		if = bits 6u {
			cube.S$
			if debug {
			puts$ "S"
			};
		} ;
		if = bits 7u {
			cube.M$
			if debug {
			puts$ "M"
			};
		} ;
	}
	if debug {
	putln$
	} ;
}


history = @String null

escapeUpSequence = [27ub 91ub 65ub]

function bool interp(cube:Cube) {
	line = stdin.next_line$

	if ||
		line.eqs$ "exit"
		line.eqs$ "quit" {
		string_free$ line
		return false
	} ;
	if line.eqs$ escapeUpSequence {
		string_free$ line
		line = history
	} {
		string_free$ history
		history = line
	}

	temp moves = line.split$ ' '
	for int [0,@int moves.size) with move {
		interp_move$ cube @String (move)moves.elements
	}
	moves.foreach$ string_free
	return true
}

function void interp_move(cube:Cube line:String) {
	
	if line.eqs$ "R" {
		cube.R$
	} ;
	if line.eqs$ "R2" {
		cube.R$
		cube.R$
	} ;
	if line.eqs$ "R'" {
		cube.Rp$
	} ;

	if line.eqs$ "L" {
		cube.L$
	} ;
	if line.eqs$ "L2" {
		cube.L$
		cube.L$
	} ;
	if line.eqs$ "L'" {
		cube.Lp$
	} ;

	if line.eqs$ "U" {
		cube.U$
	} ;
	if line.eqs$ "U2" {
		cube.U$
		cube.U$
	} ;
	if line.eqs$ "U'" {
		cube.Up$
	} ;

	if line.eqs$ "D" {
		cube.D$
	} ;
	if line.eqs$ "D2" {
		cube.D$
		cube.D$
	} ;
	if line.eqs$ "D'" {
		cube.Dp$
	} ;

	if line.eqs$ "F" {
		cube.F$
	} ;
	if line.eqs$ "F2" {
		cube.F$
		cube.F$
	} ;
	if line.eqs$ "F'" {
		cube.Fp$
	} ;

	if line.eqs$ "B" {
		cube.B$
	} ;
	if line.eqs$ "B2" {
		cube.B$
		cube.B$
	} ;
	if line.eqs$ "B'" {
		cube.Bp$
	} ;

	if line.eqs$ "M" {
		cube.M$
	} ;
	if line.eqs$ "M2" {
		cube.M$
		cube.M$
	} ;
	if line.eqs$ "M'" {
		cube.Mp$
	} ;

	if line.eqs$ "S" {
		cube.S$
	} ;
	if line.eqs$ "S2" {
		cube.S$
		cube.S$
	} ;
	if line.eqs$ "S'" {
		cube.Sp$
	} ;

	if line.eqs$ "E" {
		cube.E$
	} ;
	if line.eqs$ "E2" {
		cube.E$
		cube.E$
	} ;
	if line.eqs$ "E'" {
		cube.Ep$
	} ;

	if line.eqs$ "X" {
		cube.X$
	} ;

	if line.eqs$ "X2" {
		cube.X$
		cube.X$
	} ;
	if line.eqs$ "X'" {
		cube.Xp$
	} ;
	if line.eqs$ "Y" {
		cube.Y$
	} ;
	if line.eqs$ "Y2" {
		cube.Y$
		cube.Y$
	} ;
	if line.eqs$ "Y'" {
		cube.Yp$
	} ;
	if line.eqs$ "Z" {
		cube.Z$
	} ;
	if line.eqs$ "Z2" {
		cube.Z$
		cube.Z$
	} ;
	if line.eqs$ "Z'" {
		cube.Zp$
	} ;
}

function int println_alias(str:String) {
	println$ @ptr str.chars
	return 0
}

function void main() {
	temp playcube = Cube$
	random_scramble$ playcube false


	set cur_playing
	while cur_playing {
		cls$
		playcube.print$
		ifnot interp$ playcube {
			reset cur_playing
		} ;
		download_more_ram$
	}

	playcube.print$
	
}

main$
