guard
import null
import stdin

set consumed //probably the first time I ever actually used a flag

function void consume_line() {
	ifnot consumed {
		whilenot = getc$ '\n' ;
	} ;
	set consumed
}

function bool line_done() {// returns whether the last consumed character was a line feed
	if consumed {
		return true
	} ;
	return false
}

function void getline(str:ptr) {
	//empty the string
	maxlen = sizeof$ str
	for uint [0u,maxlen) with x {
		put_byte$ + @ptr x str 0b
	}
	size = 0u
	maxlen = - maxlen 1u
	while < size maxlen {
		char = getc$
		if = char '\r' {
		
		} {
			if = char '\n' {
				set consumed
				return
			} {
				put_ubyte$ + @ptr size str char
				size = + size 1u
			}
		}
	}
	reset consumed
}


type Input (
	function String next_line() {
		space = malloc$ 4095u
		getline$ space
		ifnot consumed {
			error$ "input string beyond input buffer size"
		} {

		}
		rv = String$ space
		free$ space
		return rv
	}
	function int next_int() {
		temp istring = this.next_line$
		return istring.to_int$
	}
)
// Input is stateless, so this is fine
stdin = @Input null
