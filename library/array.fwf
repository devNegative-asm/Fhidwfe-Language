null = as 0 ptr
one = as 1 ptr
guard
import int_size
import null
ovflow = "Array overflow."

alias uint sizeof(a:listubyte)
alias uint sizeof(a:listbyte)
alias uint sizeof(a:listfloat)
alias uint sizeof(a:listptr)
alias uint sizeof(a:listuint)
alias uint sizeof(a:listint)
alias uint sizeof(a:listfunc)

alias void memcpy(a:listbyte b:listbyte c:uint)
alias void memcpy(a:listubyte b:listubyte c:uint)


alias uint access_word(a:listuint index:uint)
alias ptr access_word(a:listptr index:uint)
alias func access_word(a:listfunc index:uint)
alias file access_word(a:listfile index:uint)
alias op access_word(a:listop index:uint)
alias uint access_word(a:listuint index:int)
alias ptr access_word(a:listptr index:int)
alias func access_word(a:listfunc index:int)
alias file access_word(a:listfile index:int)
alias op access_word(a:listop index:int)
alias int access_word(a:listint index:int)

function int access_word(list:listint index:uint) {
	if = as list ptr null {
		error$ "nullptr"
	} ;

	if < index / sizeof$ list int_size {
		index = ? index //turn it into a usable index
		return deref_int$ + as list ptr as index ptr
	} {
		puts$ "read "
		putui$ index
		puts$ " of size "
		putui$ sizeof$ list
		putln$
		error$ ovflow
	}
	return 0
}

alias ubyte access_byte(a:listubyte a:uint)
alias byte access_byte(a:listbyte a:int)
alias ubyte access_byte(a:listubyte a:int)
function byte access_byte(list:listbyte index:uint) {
	if = as list ptr null {
		error$ "nullptr"
	} ;
	if < index sizeof$ list {
		return deref_byte$ + as list ptr as index ptr
	} {
		puts$ "read "
		putui$ index
		puts$ " of size "
		putui$ sizeof$ list
		putln$
		error$ ovflow
	}
	return 0b
}
alias void assign_byte(list:listubyte index:uint b:ubyte)
alias void assign_byte(list:listubyte index:int b:ubyte)
alias void assign_byte(list:listbyte index:int b:byte)
function void assign_byte(list:listbyte index:uint b:byte) {
	if = as list ptr null {
		error$ "nullptr"
	} ;
	if < index sizeof$ list {
		put_byte$ + as list ptr as index ptr b
	} {
		puts$ "write "
		putui$ index
		puts$ " of size "
		putui$ sizeof$ list
		putln$
		error$ ovflow
	}
}

alias void assign_word(a:listuint index:uint b:uint)
alias void assign_word(a:listptr index:uint b:ptr)
alias void assign_word(a:listfunc index:uint b:func)
alias void assign_word(a:listfile index:uint b:file)
alias void assign_word(a:listop index:uint b:op)
alias void assign_word(a:listuint index:int b:uint)
alias void assign_word(a:listptr index:int b:ptr)
alias void assign_word(a:listfunc index:int b:func)
alias void assign_word(a:listfile index:int b:file)
alias void assign_word(a:listop index:int b:op)
alias void assign_word(a:listint index:int b:int)

function void assign_word(list:listint index:uint b:int) {
	if = as list ptr null {
		error$ "nullptr"
	} ;
	if < index / sizeof$ list int_size {
		index = ?index
		put_int$ + as list ptr as index ptr b
	} {
		puts$ "write "
		putui$ index
		puts$ " of size "
		putui$ sizeof$ list
		putln$
		error$ ovflow
	}
}

alias listint map(fn:func list:listint)
alias listptr map(fn:func list:listptr)
function listuint map(fn:func list:listuint) {
	if = as list ptr null {
		error$ "nullptr"
	} ;
	result = @listuint malloc$ sizeof$ list
	for uint [0u,/ sizeof$ list int_size) with index {
		(index)result = $ fn (index)list
	}
	return result
}

alias listint map_to(fn:func list:listint)
alias listptr map_to(fn:func list:listptr)
function listuint map_to(fn:func list:listuint) {
	if = as list ptr null {
		error$ "nullptr"
	} ;
	result = as malloc$ sizeof$ list listuint
	for uint [0u,/ sizeof$ list int_size) with index {
		(index)result = $ fn (index)list
	}
	free$ as list ptr
	return result
}

function listbyte double_len(a:listbyte) {
	b = as malloc$ << sizeof$ a listbyte
	memcpy$ as b ptr as a ptr sizeof$ a
	free$ as a ptr
	return b
}

type Arraylist (
	eqfunc:op
	elements:listptr
	size:uint
	capacity:uint

	function void init(equalityOperator:op) {
		this.capacity = 10u
		this.size = 0u
		this.elements = malloc$ ?10u
		this.eqfunc = equalityOperator
	}

	alias void add(elem:int)
	alias void add(elem:uint)
	alias void add(elem:file)
	alias void add(elem:func)
	alias void add(elem:op)
	function void add(elem:ptr) {
		if = this.size this.capacity {
			newcap = << this.capacity
			this.capacity = newcap
			this.elements = realloc$ @ptr this.elements ?newcap
		} ;
		(this.size)this.elements = elem
		this.size = + this.size 1u
	}

	alias ptr get(index:int)
	function ptr get(index:uint) {
		if >= index this.size {
			error$ "attempted to get beyond bounds of arraylist"
		} ;
		return (index)this.elements
	}

	alias void remove_index(index:int)
	function void remove_index(index:uint) {
		if >= index this.size {
			error$ "attempted to remove beyond bounds of arraylist"
		} ;
		startCopyFrom = + index 1u
		numToCopy = - this.size startCopyFrom
		for uint [0u,numToCopy) with offset {
			(+ index offset)this.elements = (+ startCopyFrom offset)this.elements
		}
		this.size = - this.size 1u
	}

	alias bool contains(elem:ptr)
	alias bool contains(elem:uint)
	function bool contains(elem:int) {
		return >= this.index_of$ elem 0
	}

	alias int index_of(elem:int)
	alias int index_of(elem:uint)
	function int index_of(elem:ptr) {
		if = 0u this.size {
			return !1
		} ;
		temp iterator = [0u,this.size)
		for uint iterator with index {
			ifnot = 0u binop$ this.eqfunc elem (index)this.elements {
				return @int index
			} ;
		}
		return !1
	}

	alias ptr fold_left(baseval:ptr action:op)
	alias int fold_left(baseval:int action:op)
	function uint fold_left(baseval:uint action:op) {
		for uint [0u,this.size) with index {
			elem = (index)this.elements
			baseval = binop$ action baseval elem
		}
		return baseval
	}

	function void foreach(action:func) {
		for uint [0u,this.size) with index {
			$ action (index)this.elements
		}
	}

	function void clear() {
		free$ this.elements
		this.init$ this.eqfunc
	}

	function void delete() {
		ifnot = this null {
			free$ this.elements
			this.elements = null
			this.capacity = 0u
			this.size = 0u
		} ;
	}

	function bool is_empty() {
		return = 0u this.size
	}

)

function bool is_alias(x:ptr y:ptr) {
	return = x y
}

type ArrayStringMap (
	keys:Arraylist
	values:Arraylist
	function void init() {
		this.keys = Arraylist$ string_eq
		this.values = Arraylist$ is_alias
	}
	
	alias void put(key:String value:int)
	alias void put(key:String value:uint)
	alias void put(key:String value:func)
	alias void put(key:String value:op)
	alias void put(key:String value:file)
	function void put(key:String value:ptr) {
		index = this.keys.index_of$ key
		if = !1 index {
			this.keys.add$ key
			this.values.add$ value
		} {
			(index)this.values.elements = value
		}
	}
	function ptr get(key:String) {
		index = this.keys.index_of$ key
		if = !1 index {
			return null
		} ;
		return (index)this.values.elements
	}
	function void remove(key:String) {
		index = this.keys.index_of$ key
		if = !1 index {
			return
		} ;
		this.values.remove_index$ index
		this.keys.remove_index$ index
	}
	function void clear() {
		this.delete$
		this.init$ 
	}
	function void delete() {
		ifnot = this null {
			this.keys.delete$
			free$ this.keys
			this.values.delete$
			free$ this.values
		} ;
	}
	function bool contains_key(key:String) {
		return <= 0 this.keys.index_of$ key
	}
	function void for_each(operator:op) {
		for uint [0u,this.keys.size) with index {
			binop$ operator (index)this.keys.elements (index)this.values.elements
		}
	} 
	function bool is_empty() {
		return = 0u this.keys.size
	}
)