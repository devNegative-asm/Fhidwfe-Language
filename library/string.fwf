
guard
import one
import int_size
import null

type String (
	length:int
	chars:listubyte
	
	function void init(cstring:ptr) {
		this.length = sizeof$ cstring
		this.chars = @listubyte malloc$ @uint this.length
		memcpy$ @ptr this.chars cstring @uint this.length
	}

	function listubyte to_char_list() {
		return this.chars
	}

	function void for_chars(operation:func) {
		for ubyte this.chars with c {
			$ operation @uint c
		}
	}

	function ptr c_str() {
		cstr = @listubyte malloc$ @uint + this.length 1
		memcpy$ cstr this.chars @uint this.length
		(this.length)cstr = 0ub
		return @ptr cstr
	}

	function void delete() {
		ifnot = this null {
			free$ this.chars
		} ;
	}

	function String append(other:String) {
		result = String$ ""
		result.delete$

		len = @uint + this.length other.length
		result.length = len
		rawchars = malloc$ len

		memcpy$ rawchars this.chars @uint this.length
		memcpy$ + rawchars this.length other.chars @uint other.length

		return result
	}

	function int to_int() {
		return str_to_int$ this.chars
	}

	function bool eq(other:String) {
		return streq$ this.chars other.chars
	}

	function bool eqs(other:listubyte) {
		return streq$ this.chars other
	}

	function int compare(other:String) {
		return strcmp$ this.chars other.chars
	}

	function String join(strings:listptr) {
		
		if = 0u sizeof$ strings {
			return String$ ""
		} ;
		
		myrepeats = -
			/ sizeof$ strings int_size
			1u

		totalLength = * @uint this.length myrepeats

		for ptr strings with strptr {
			theString = @String strptr
			totalLength = + totalLength @uint theString.length
		}

		placementTarget = malloc$ totalLength
		retval = placementTarget
		firststring = @String deref_ptr$ strings
		memcpy$ placementTarget firststring.chars @uint firststring.length

		placementTarget = + placementTarget firststring.length

		for uint (0u,/ sizeof$ strings int_size) with index {
			memcpy$ placementTarget this.chars @uint this.length
			placementTarget = + placementTarget this.length
			theString2 = @String (index)strings
			memcpy$ placementTarget theString2.chars @uint theString2.length
			placementTarget = + placementTarget theString2.length
		}
		rv = String$ retval
		free$ retval
		return rv

	}
	//toUpperCase
)


function uint strlen(s:ptr) {
	return sizeof$ s
}


function void dump_list(bytes:listubyte) {
	puti$ sizeof$ bytes
	for ubyte bytes with b {
		puts$" "
		putui$ @uint b
	}
	putln$
}

import one
function bool streq(str1:listubyte str2:listubyte) {
	return = 0 strcmp$ str1 str2
}

function bool string_eq(str1:String str2:String) {
	return streq$ str1.chars str2.chars
}

function int strcmp(str1:listubyte str2:listubyte) {
	//str1 - str2
	stopComparingAt = umin$ strlen$ str1 strlen$ str2
	temp iterable = [0u,stopComparingAt)

	for uint iterable with index {
		b1 = @uint (index)str1
		b2 = @uint (index)str2
		ifnot = 0u - b1 b2 {
			return - @int b1 @int b2 
		} ;
	}

	//the longer one is higher
	return @int - strlen$ str1 strlen$ str2 
}

function int str_to_int (num:listubyte) {
	//scans the given string for the longest input that matches
	//  /-?[0-9]*
	// parses that as an integer, ignoring overflows
	// ignores anything after the digits
	// str_to_int$ "" = 0
	// str_to_int$ "-" = 0
	// str_to_int$ "100" = 100
	// str_to_int$ "-13wot" = -13
	temp digits = ['0','9']
	reset negative
	read = num
	num1 = 0
	if = 0u sizeof$ num {
		return 0
	} ;
	if = (0)num '-' {
		set negative
	} ;
	set first
	for ubyte num with char {
		set mustread
		if first {
			if negative {
				reset mustread
			} ;
		} ;
		if mustread {
			if in char digits {
				num1 = + * 10 num1 @int - char '0'
			} {
				if negative {
					return !num1
				} {
					return num1
				}
			}
		} ;
		reset first
	}
	if negative {
		return !num1
	} ;
	return num1
}

alias uint string_hash(string:uint)
function uint string_hash(string:listubyte) {
	hash = 13u
	for ubyte string with char {
		hash = + * hash 41u @uint char
	}
	return hash
}
