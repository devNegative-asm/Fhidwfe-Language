guard
import one
lowers = ['a','z']
function ptr concat(s1:ptr s2:ptr) {
	//concat s1 with s2 and return it as a new string
	len_1 = strlen$ s1
	len_2 = strlen$ s2
	
	final_size = + len_1 len_2
	
	writer = malloc$ + final_size 1u
	writer2 = + writer as len_1 ptr
	endloc = + writer as final_size ptr
	
	for uint [0u, len_1) with loc {
		put_byte$ + as loc ptr writer deref_byte$ + s1 as loc ptr 
	}
	
	writer = + writer as len_1 ptr
	
	
	for uint [0u, len_2) with loc2 {
		put_byte$ + as loc2 ptr writer2 deref_byte$ + s2 as loc2 ptr 
	}
	
	put_byte$ endloc 0b
	return writer
}

function uint strlen(s:ptr) {
	offset = 0u
	while true {
		x = deref_byte$ s
		if = x 0b {
			return offset
		} {
			s = + s as 1 ptr
			offset = + offset 1u
		}
	}
	return offset
}

function ptr makestr(s:ptr) {//make a string from a byte list
	len = sizeof$ s
	ret = malloc$ + len 1u
	memcpy$ ret s len
	put_byte$ + as len ptr s 0b
	return stralloc_delete$ ret //trim trailing 0 bytes
}

function ptr stralloc(s:ptr) {//make a string on the heap
	len = strlen$ s
	ret = malloc$ + len 1u
	memcpy$ ret s + len 1u
	return ret
}

function ptr stralloc_delete(s:ptr) {//make a string from the given string or list with 0 terminator
	rett = stralloc$ s
	free$ s
	return rett
}

alias ptr join(strlist:listptr delim:ubyte)
alias ptr join(strlist:listptr delim:byte)
alias ptr join(strlist:ptr delim:byte)

function ptr join(strlist:ptr delim:ubyte) {
	int_size = ?1
	list_size = / sizeof$ strlist int_size
	if = list_size 0u {
		newjjo = malloc$ 1u
		put_ubyte$ newjjo 0ub
		return newjjo
	} ;
	final_size = list_size
	for uint [0u,list_size) with index {
		str_pointer = deref_ptr$ + strlist as * int_size index ptr
		final_size = + final_size strlen$ str_pointer
	}
	joined = malloc$ final_size
	final_size = 0u
	
	for uint [0u,list_size) with count {
		str_copy = deref_ptr$ + strlist as * int_size count ptr
		memcpy$ + as final_size ptr joined str_copy strlen$ str_copy
		final_size = + final_size strlen$ str_copy
		put_ubyte$ + as final_size ptr joined delim
		final_size = + final_size 1u
	}
	put_ubyte$ + as - final_size 1u ptr joined 0ub
	
	return joined
}

function void capitalize_inplace(strin:ptr) {
	if = 0u strlen$ strin {
		return
	} ;
	for ptr [strin, + strin as strlen$ strin ptr) with location {
		char = deref_ubyte$ location
		if in char lowers {
			put_ubyte$ location - + char 'A' 'a'
		} ;
	}
}

function ptr capitalize_copy(strin:ptr) {
	rett = stralloc$ strin
	if = 0u strlen$ strin {
		return rett
	} ;
	for ptr [as 0u ptr,as strlen$ rett ptr) with offset {
		char = deref_ubyte$ +rett offset
		if in char lowers {
			put_ubyte$ +rett offset - + char 'A' 'a'
		} ;
	}
	return rett
}

import one
function bool streq(str1:ptr str2:ptr) {
	return = 0 strcmp$ str1 str2
}

function int strcmp(str1:ptr str2:ptr) {
	//str1 - str2
	while = deref_byte$ str1 deref_byte$ str2 {
		if = 0b deref_byte$ str1 {//they both terminated at the same time
			return 0
		} {
			str1 = + one str1
			str2 = + one str2
		}
	}
	return  - as deref_ubyte$ str1 int as deref_byte$ str2 int
}

digits = ['0','9']
function int str_to_int (num:ptr) {
	//scans the given string for the longest input that matches
	//  /-?[0-9]*
	// parses that as an integer, ignoring overflows
	// ignores anything after the digits
	// str_to_int$ "" = 0
	// str_to_int$ "-" = 0
	// str_to_int$ "100" = 100
	// str_to_int$ "-13josh" = -13
	reset negative
	read = num
	num1 = 0
	if = deref_ubyte$ num '-' {
		set negative
		read = + read one
	} ;
	while in deref_ubyte$ read digits {
		num1 = + * 10 num1 as - deref_ubyte$ read '0' int
		read = + one read
	}
	if negative {
		num1 = !num1
	} ;
	return num1
}

alias uint stringhash(string:uint)
function uint stringhash(string:ptr) {
	hash = 13u
	whilenot = 0b deref_byte$ string {
		hash = + * hash 41u as deref_ubyte$ string uint
		string = + string as 1 ptr
	}
	return hash
}