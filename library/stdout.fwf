guard
import one

function void putui(num:uint) {
	if > num 9u {
		upper = / num 10u
		putui$ upper
		putchar$ + '0' @ubyte - num * 10u upper
	} {
		putchar$ + '0' @ubyte num
	}
}

function void puti(num:int) {
	if < num 0 {
		putchar$ '-'
		num = !num // negation in any language has 2 fixed points: 0, and the smallest negative number. We don't have to worry about printing -- because we treat it as unsigned from here on
	} ;
	putui$ @uint num
}

function void put_bool(b:bool) {
	if b {
		puts$ "true"
	} {
		puts$ "false"
	}
}

alias void put_hex(i:ptr)
alias void put_hex(i:int)
function void put_hex(i:uint) {
	// we want to access the highest nibble repeatedly
	// this is easiest done by pointer magic
	int_size = ?1
	putchar$ '0'
	putchar$ 'x'
	added = 1u
	while <= added int_size {
		offset = @ptr - int_size added
		thebyte = deref_ubyte$ + @i offset
		put_hexit$ >> >> >> >> thebyte
		put_hexit$ & 15ub thebyte
		added = + added 1u
	}
}

function void put_hexit(i:ubyte) {
	if < i 10ub {
		putchar$ + i '0'
	} {
		putchar$ + i '7' //depends on ascii implementation
	}
}

alias void puts(s:listbyte)
alias void puts(s:listubyte)

function void puts(s:ptr) {//similar to puts in C.
	for ubyte @listubyte s with char {
		if = char '\n' {
			putln$
		} {
			putchar$ char
		}
	}
}

function void println(s:ptr) {
	puts$ s
	putln$
}
