guard

function byte log2(x:uint) {
	lg = !1b
	while > x 0u {
		x = >> x
		++ @lg
	}
	return lg
}

function int max(a:int b:int) {
	if > a b {
		return a
	} ;
	return b
}

function uint umax(a:uint b:uint) {
	if > a b {
		return a
	} ;
	return b
}

function int min(a:int b:int) {
	if > a b {
		return b
	} ;
	return a
}

function uint umin(a:uint b:uint) {
	if > a b {
		return b
	} ;
	return a
}

function uint pow2(x:uint) {
	res = 1u
	if >= x ?8 {
		return 0u
	} ;
	while > x 0u {
		res = <<res
		x = - x 1u
	}
	return res
}

//an alternating sign function
alias int sflip(x:uint)
function int sflip(x:int) {
	return - 1 << - x << >> x 
}

function int abs(x:int) {
	if < x 0 {
		return !x
	} ;
	return x
}

function int sdiv(a:int b:int) {
	a_negative = < a 0
	b_negative = < b 0
	if a_negative {
		a = !a
	} ;
	if b_negative {
		b = !b
	} ;
	if ^ a_negative b_negative {
		return ! as / as a uint as b uint int
	} {
		return as / as a uint as b uint int
	}
	return 0
}

function byte sbdiv(a:byte b:byte) {
	a_negative = < a 0b
	b_negative = < b 0b
	if a_negative {
		a = !a
	} ;
	if b_negative {
		b = !b
	} ;
	if ^ a_negative b_negative {
		return ! as / as a ubyte as b ubyte byte
	} {
		return as / as a ubyte as b ubyte byte
	}
	return 0b
}

function int smod(a:int b:int) {
	if = b 0 {return 0};
	possible = - a * / a b b
	if >= b 0 {
		while < possible 0 {
			possible = + possible b
		}
	} {
		while > possible 0 {
			possible = + possible b
		}
	}
	return possible
}

function byte sbmod(a:byte b:byte) {
	if = b 0b {return 0b};
	possible = - a * / a b b
	if >= b 0b {
		while < possible 0b {
			possible = + possible b
		}
	} {
		while > possible 0b {
			possible = + possible b
		}
	}
	return possible
}

function uint uint_pow(base:uint exponent:uint) {
	if = 0u exponent {
		return 1u
	} ;
	if = 1u & exponent 1u {
		return * base uint_pow$ * base base >> exponent
	} ;
	return uint_pow$ * base base >> exponent
}


function int shift_r_arithmetic(x:int c:uint) {
	c = & c - ?8u 1u
	while > c 0u {
		x = >> x
		c = - c 1u
	}
	return x
}
function uint shift_right(x:uint c:uint) {
	c = & c - ?8u 1u
	while > c 0u {
		x = >> x
		c = - c 1u
	}
	return x
}
alias int shift_left(x:int c:uint)
function uint shift_left(x:uint c:uint) {
	c = & c - ?8u 1u
	while > c 0u {
		x = << x
		c = - c 1u
	}
	return x
}