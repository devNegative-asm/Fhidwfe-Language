guard
import null

//
// Structure of a hashset:
// some number of entries
// @ each index, place a linked list, null terminated
// each node is a listptr. one to the next node, one to the contents
//
//
//
//
//


hashset_size = 512u //really space inefficient because 2 pages to hold 1 page + 1 int, but whatever


type Ptrpair (
	key:ptr
	value:ptr
)


type Hashset (
	entries:listptr
	hashfunc:func
	eqfunc:op
	
	function void init(hashfunc:func eqfunc:op) {
		this.hashfunc = hashfunc
		this.eqfunc = eqfunc
		this.entries = @listptr malloc$ ?hashset_size
		for uint [0u,hashset_size) with i {
			assign_word$ this.entries i null
		}
	}

	function void delete() {
		for uint [0u,hashset_size) with i {
			this.delete_entry$ access_word$ this.entries i
		}
		free$ this.entries
	}

	function void delete_entry(link:ptr) {
		if = link null {
			return
		} {
			this.delete_entry$ deref_ptr$ + link @ptr ?1
			free$ link
		}
	}

	function void add(element:ptr) {
		index = & - hashset_size 1u @uint $ this.hashfunc element
		node = access_word$ this.entries index
		location = + @ptr ?index @ptr this.entries
		whilenot = node null {
			//either this is the element and I can reassign it and return, or it's not and I continue
			ifnot = 0u binop$ this.eqfunc @uint access_word$ @listptr node 0u @uint element {
				assign_word$ @listptr node 0u element
				return
			} {
				location = + @ptr ?1u node
				node = access_word$ @listptr node 1u
			}
		}
		node = malloc$ ?2u
		put_ptr$ location node
		assign_word$ @listptr node 1u null
		assign_word$ @listptr node 0u element
	}

	function void remove(element:ptr) {
		index = & - hashset_size 1u @uint $ this.hashfunc element
		node = access_word$ this.entries index
		location = + @ptr ?index @ptr this.entries
		whilenot = node null {
			//either this is the element and I can delete it and return, or it's not and I continue
			ifnot = 0u binop$ this.eqfunc @uint access_word$ @listptr node 0u @uint element {
				
				//last.next = node.next
				put_ptr$ location access_word$ @listptr node 1u
				free$ node

				return
			} {
				location = + @ptr ?1u node
				node = access_word$ @listptr node 1u
			}
		}
	}

	function bool contains(element:ptr) {
		index = & - hashset_size 1u @uint $ this.hashfunc element
		node = access_word$ this.entries index
		location = + @ptr ?index @ptr this.entries
		whilenot = node null {
			//either this is the element and I can return, or it's not and I continue
			ifnot = 0u binop$ this.eqfunc @uint access_word$ @listptr node 0u @uint element {
				return true
			} {
				node = access_word$ @listptr node 1u
			}
		}
		return false
	}

	function void foreach(operation:func) {
		for ptr this.entries with element {
			whilenot = null element {
				$ operation access_word$ @listuint element 0u
				element = access_word$ @listptr element 1u
			}
		}
	}
)
