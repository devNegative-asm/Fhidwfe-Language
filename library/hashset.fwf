guard
import null

//
// Structure of a hashset:
// 2048 entries
// @ each index, place a linked list, null terminated
// each node is a listptr. one to the next node, one to the contents
//
//
//
//
//

function listptr hashset_new() {
	map =  as malloc$ ?2048 listptr
	for uint [0u,2048u) with i {
		assign_word$ map i null
	}
	return map
}

function void delete_hashset_entry(link:ptr) {
	if = link null {
		return
	} {
		delete_hashset_entry$ deref_ptr$ + link as ?1 ptr
		free$ link
	}
}

function void hashset_delete(hashset:listptr) {
	for uint [0u,2048u) with i {
		delete_hashset_entry$ access_word$ hashset i
	}
	free$ hashset
}

function void hashset_put(hashset:listptr element:ptr hashfunc:func eqfunc:op) {
	index = & 2047u as $ hashfunc element uint
	node = access_word$ hashset index
	location = + as ?index ptr as hashset ptr
	whilenot = node null {
		//either this is the element and I can return, or it's not and I continue
		ifnot = 0u binop$ eqfunc as access_word$ as node listptr 0u uint as element uint {
			return
		} {
			location = + as ?1u ptr node
			node = access_word$ as node listptr 1u
		}
	}
	node = malloc$ ?2u
	put_ptr$ location node
	assign_word$ as node listptr 1u null
	assign_word$ as node listptr 0u element
}

function bool hashset_contains(hashset:listptr element:ptr hashfunc:func eqfunc:op) {
	index = & 2047u as $ hashfunc element uint
	node = access_word$ hashset index
	location = + as ?index ptr as hashset ptr
	whilenot = node null {
		//either this is the element and I can return, or it's not and I continue
		ifnot = 0u binop$ eqfunc as access_word$ as node listptr 0u uint as element uint {
			return true
		} {
			node = access_word$ as node listptr 1u
		}
	}
	return false
}